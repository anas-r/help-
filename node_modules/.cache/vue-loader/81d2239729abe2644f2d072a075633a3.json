{"remainingRequest":"/home/anasr/Projects/VueJSProject/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/anasr/Projects/VueJSProject/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/anasr/Projects/VueJSProject/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anasr/Projects/VueJSProject/src/App.vue?vue&type=template&id=7ba5bd90&scoped=true&","dependencies":[{"path":"/home/anasr/Projects/VueJSProject/src/App.vue","mtime":1610647147880},{"path":"/home/anasr/Projects/VueJSProject/node_modules/cache-loader/dist/cjs.js","mtime":1610638898750},{"path":"/home/anasr/Projects/VueJSProject/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1610638899960},{"path":"/home/anasr/Projects/VueJSProject/node_modules/cache-loader/dist/cjs.js","mtime":1610638898750},{"path":"/home/anasr/Projects/VueJSProject/node_modules/vue-loader/lib/index.js","mtime":1610638899960}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}